AWSTemplateFormatVersion: 2010-09-09
Description: Simple Server
Parameters:
  Env:
    Type: String
  OpsTeamCidr:
    Type: String
    Default: 0.0.0.0/0
  KeyPairName:
    Type: String
  S3TemplatePath:
    Type: String
  Region:
    Type: String
    Default: eu-west-1
  VpcCidr:
    Type: String
  PublicSubnetCidrA:
    Type: String
  PublicSubnetCidrB:
    Type: String
  PublicSubnetCidrC:
    Type: String
  PrivateSubnetCidrA:
    Type: String
  PrivateSubnetCidrB:
    Type: String
  PrivateSubnetCidrC:
    Type: String
  NodeServerInstanceType:
    Type: String
    Default: t2.nano
Mappings:
  AWSRegionToCentOSAMI:
    eu-west-1:
      AMIID: ami-6e28b517
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${Env}-vpc'
  SubnetStackA:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub '${S3TemplatePath}/subnet-stack.yml'
      Parameters:
        Env: !Ref 'Env'
        VpcId: !Ref 'Vpc'
        PublicSubnetCidr: !Ref 'PublicSubnetCidrA'
        PrivateSubnetCidr: !Ref 'PrivateSubnetCidrA'
        AZ: !Sub '${Region}a'
        MainRouteTableId: !Ref 'MainRouteTable'
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackName'
  SubnetStackB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub '${S3TemplatePath}/subnet-stack.yml'
      Parameters:
        Env: !Ref 'Env'
        VpcId: !Ref 'Vpc'
        PublicSubnetCidr: !Ref 'PublicSubnetCidrB'
        PrivateSubnetCidr: !Ref 'PrivateSubnetCidrB'
        AZ: !Sub '${Region}b'
        MainRouteTableId: !Ref 'MainRouteTable'
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackName'
  SubnetStackC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub '${S3TemplatePath}/subnet-stack.yml'
      Parameters:
        Env: !Ref 'Env'
        VpcId: !Ref 'Vpc'
        PublicSubnetCidr: !Ref 'PublicSubnetCidrC'
        PrivateSubnetCidr: !Ref 'PrivateSubnetCidrC'
        AZ: !Sub '${Region}c'
        MainRouteTableId: !Ref 'MainRouteTable'
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackName'
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Env}-igw'
  IgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'Igw'
      VpcId: !Ref 'Vpc'
  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-main-route-table'
  MainRouteIgw:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref 'MainRouteTable'
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref 'Igw'
  NodeServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Env}-node-server-sg'
      GroupDescription: Security Group for Node Server
      VpcId: !Ref 'Vpc'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'OpsTeamCidr'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-node-server-sg'
  NodeServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap ['AWSRegionToCentOSAMI', !Ref 'AWS::Region', AMIID]
      InstanceType: !Ref 'NodeServerInstanceType'
      KeyName: !Ref 'KeyPairName'
      SubnetId: !GetAtt 'SubnetStackA.Outputs.PublicSubnetId'
      SecurityGroupIds:
        - !Sub '${NodeServerSecurityGroup.GroupId}'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-node-server'
Outputs:
  VpcId:
    Value: !Ref 'Vpc'
    Export:
      Name: !Sub '${Env}-vpc-id'
  PublicSubnets:
    Value: !Join
      - ','
      - - !GetAtt 'SubnetStackA.Outputs.PublicSubnetId'
        - !GetAtt 'SubnetStackB.Outputs.PublicSubnetId'
        - !GetAtt 'SubnetStackC.Outputs.PublicSubnetId'
    Export:
      Name: !Sub '${Env}-public-subnets'
  PrivateSubnets:
    Value: !Join
      - ','
      - - !GetAtt 'SubnetStackA.Outputs.PrivateSubnetId'
        - !GetAtt 'SubnetStackB.Outputs.PrivateSubnetId'
        - !GetAtt 'SubnetStackC.Outputs.PrivateSubnetId'
    Export:
      Name: !Sub '${Env}-private-subnets'
  NodeServerPublicIp:
    Value: !Sub '${NodeServerInstance.PublicIp}'
    Export:
      Name: !Sub '${Env}-node-server-public-ip'
  NodeServerPrivateIp:
    Value: !Sub '${NodeServerInstance.PrivateIp}'
    Export:
      Name: !Sub '${Env}-node-server-private-ip'
  NodeServerAZ:
    Value: !Sub '${NodeServerInstance.AvailabilityZone}'
    Export:
      Name: !Sub '${Env}-node-server-az'
